"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DexterPoolHelper = void 0;
const big_integer_1 = __importDefault(require("big-integer"));
const jsonpath_plus_1 = require("jsonpath-plus");
const TezosTypes = __importStar(require("../../../types/tezos/TezosChainTypes"));
const TezosNodeReader_1 = require("../TezosNodeReader");
const TezosNodeWriter_1 = require("../TezosNodeWriter");
const TezosContractUtils_1 = require("./TezosContractUtils");
const TezosMessageUtil_1 = require("../TezosMessageUtil");
var DexterPoolHelper;
(function (DexterPoolHelper) {
    const DexterPoolLiquidityOperationGasLimit = 500000;
    const DexterPoolLiquidityOperationStorageLimit = 5000;
    const DexterPoolExchangeOperationGasLimit = 500000;
    const DexterPoolExchangeOperationStorageLimit = 5000;
    const ExchangeMultiplier = 997;
    function verifyDestination(server, address) {
        return __awaiter(this, void 0, void 0, function* () {
            return TezosContractUtils_1.TezosContractUtils.verifyDestination(server, address, 'a72954311c48dcc28279590d82870611');
        });
    }
    DexterPoolHelper.verifyDestination = verifyDestination;
    function verifyScript(script) {
        return TezosContractUtils_1.TezosContractUtils.verifyScript(script, 'yyy');
    }
    DexterPoolHelper.verifyScript = verifyScript;
    function getSimpleStorage(server, address) {
        return __awaiter(this, void 0, void 0, function* () {
            const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, address);
            return {
                balanceMap: Number((0, jsonpath_plus_1.JSONPath)({ path: '$.args[0].int', json: storageResult })[0]),
                administrator: (0, jsonpath_plus_1.JSONPath)({ path: '$.args[2].args[0].string', json: storageResult })[0],
                token: (0, jsonpath_plus_1.JSONPath)({ path: '$.args[2].args[1].string', json: storageResult })[0],
                tokenBalance: Number((0, jsonpath_plus_1.JSONPath)({ path: '$.args[3].int', json: storageResult })[0]),
                xtzBalance: Number((0, jsonpath_plus_1.JSONPath)({ path: '$.args[4].int', json: storageResult })[0]),
                selfIsUpdatingTokenPool: ((0, jsonpath_plus_1.JSONPath)({ path: '$.args[1].args[0].prim', json: storageResult })[0]).toString().toLowerCase().startsWith('t'),
                freeze_baker: ((0, jsonpath_plus_1.JSONPath)({ path: '$.args[1].args[0].prim', json: storageResult })[0]).toString().toLowerCase().startsWith('t'),
                lqt_total: Number((0, jsonpath_plus_1.JSONPath)({ path: '$.args[1].args[2].int', json: storageResult })[0])
            };
        });
    }
    DexterPoolHelper.getSimpleStorage = getSimpleStorage;
    function getAccountBalance(server, mapid, account) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(account, 'address'), 'hex'));
                const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);
                if (mapResult === undefined) {
                    throw new Error(`Map ${mapid} does not contain a record for ${account}`);
                }
                const jsonresult = (0, jsonpath_plus_1.JSONPath)({ path: '$.args[0].int', json: mapResult });
                return Number(jsonresult[0]);
            }
            catch (_a) {
                return 0;
            }
        });
    }
    DexterPoolHelper.getAccountBalance = getAccountBalance;
    function getAccountPoolShare(server, address, account) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const storage = yield getSimpleStorage(server, address);
                const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(account, 'address'), 'hex'));
                const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, storage.balanceMap, packedKey);
                if (mapResult === undefined) {
                    throw new Error(`Map ${storage.balanceMap} does not contain a record for ${account}`);
                }
                const poolBalance = (0, big_integer_1.default)((0, jsonpath_plus_1.JSONPath)({ path: '$.args[0].int', json: mapResult })[0]);
                const poolTotal = (0, big_integer_1.default)(storage.lqt_total);
                const tokenBalance = (0, big_integer_1.default)(storage.tokenBalance);
                const xtzBalance = (0, big_integer_1.default)(storage.xtzBalance);
                return { token: tokenBalance.multiply(poolBalance).divide(poolTotal).toJSNumber(), xtz: xtzBalance.multiply(poolBalance).divide(poolTotal).toJSNumber() };
            }
            catch (error) {
                return { token: 0, xtz: 0 };
            }
        });
    }
    DexterPoolHelper.getAccountPoolShare = getAccountPoolShare;
    function getAccountAllowance(server, mapid, account, spender) {
        return __awaiter(this, void 0, void 0, function* () {
            const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(account, 'address'), 'hex'));
            const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);
            if (mapResult === undefined) {
                throw new Error(`Map ${mapid} does not contain a record for ${account}/${spender}`);
            }
            let allowances = new Map();
            (0, jsonpath_plus_1.JSONPath)({ path: '$.args[1][*].args', json: mapResult }).forEach(v => allowances[v[0]['string']] = Number(v[1]['int']));
            return allowances[spender] || 0;
        });
    }
    DexterPoolHelper.getAccountAllowance = getAccountAllowance;
    function addLiquidity(server, signer, keyStore, contract, fee, liquidityAmount, xtzAmount, tokenAmount, expiration) {
        return __awaiter(this, void 0, void 0, function* () {
            const parameters = `(Pair (Pair "${keyStore.publicKeyHash}" ${liquidityAmount}) (Pair ${tokenAmount} "${expiration.toISOString()}"))`;
            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keyStore, contract, xtzAmount, fee, DexterPoolLiquidityOperationStorageLimit, DexterPoolLiquidityOperationGasLimit, 'addLiquidity', parameters, TezosTypes.TezosParameterFormat.Michelson);
            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);
        });
    }
    DexterPoolHelper.addLiquidity = addLiquidity;
    function removeLiquidity(server, signer, keyStore, contract, fee, balance, xtzBalance, tokenBalance, expiration) {
        return __awaiter(this, void 0, void 0, function* () {
            const parameters = `(Pair (Pair "${keyStore.publicKeyHash}" (Pair "${keyStore.publicKeyHash}" ${balance})) (Pair ${xtzBalance} (Pair ${tokenBalance} "${expiration.toISOString()}")))`;
            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keyStore, contract, 0, fee, DexterPoolLiquidityOperationStorageLimit, DexterPoolLiquidityOperationGasLimit, 'removeLiquidity', parameters, TezosTypes.TezosParameterFormat.Michelson);
            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);
        });
    }
    DexterPoolHelper.removeLiquidity = removeLiquidity;
    function xtzToToken(server, signer, keyStore, contract, fee, xtzAmount, tokenAmount, expiration) {
        return __awaiter(this, void 0, void 0, function* () {
            const parameters = `(Pair "${keyStore.publicKeyHash}" (Pair ${tokenAmount} "${expiration.toISOString()}"))`;
            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keyStore, contract, xtzAmount, fee, DexterPoolExchangeOperationStorageLimit, DexterPoolExchangeOperationGasLimit, 'xtzToToken', parameters, TezosTypes.TezosParameterFormat.Michelson);
            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);
        });
    }
    DexterPoolHelper.xtzToToken = xtzToToken;
    function tokenToXtz(server, signer, keyStore, contract, fee, xtzAmount, tokenAmount, expiration) {
        return __awaiter(this, void 0, void 0, function* () {
            const parameters = `(Pair (Pair "${keyStore.publicKeyHash}" "${keyStore.publicKeyHash}") (Pair ${tokenAmount} (Pair ${xtzAmount} "${expiration.toISOString()}")))`;
            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keyStore, contract, 0, fee, DexterPoolExchangeOperationStorageLimit, DexterPoolExchangeOperationGasLimit, 'tokenToXtz', parameters, TezosTypes.TezosParameterFormat.Michelson);
            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);
        });
    }
    DexterPoolHelper.tokenToXtz = tokenToXtz;
    function tokenToToken(server, signer, keyStore, contract, fee, otherPoolContract, sellAmount, buyAmount, expiration) {
        return __awaiter(this, void 0, void 0, function* () {
            const parameters = `(Pair (Pair "${otherPoolContract}" (Pair ${buyAmount} "${keyStore.publicKeyHash}")) (Pair "${keyStore.publicKeyHash}" (Pair ${sellAmount} "${expiration.toISOString()}")))`;
            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keyStore, contract, 0, fee, DexterPoolExchangeOperationStorageLimit, 1000000, 'tokenToToken', parameters, TezosTypes.TezosParameterFormat.Michelson);
            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);
        });
    }
    DexterPoolHelper.tokenToToken = tokenToToken;
    function approve(server, signer, keyStore, contract, fee, spender, newAllowance, currentAllowance) {
        return __awaiter(this, void 0, void 0, function* () {
            const parameters = `(Pair "${spender}" (Pair ${newAllowance} ${currentAllowance}))`;
            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keyStore, contract, 0, fee, DexterPoolExchangeOperationStorageLimit, DexterPoolExchangeOperationGasLimit, 'approve', parameters, TezosTypes.TezosParameterFormat.Michelson);
            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);
        });
    }
    DexterPoolHelper.approve = approve;
    function previewTransactions() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    DexterPoolHelper.previewTransactions = previewTransactions;
    function calcTokenLiquidityRequirement(xtzDeposit, tokenBalance, xtzBalance) {
        return (0, big_integer_1.default)(xtzDeposit).multiply((0, big_integer_1.default)(tokenBalance)).divide((0, big_integer_1.default)(xtzBalance)).toJSNumber();
    }
    DexterPoolHelper.calcTokenLiquidityRequirement = calcTokenLiquidityRequirement;
    function getTokenExchangeRate(xtzAmount, tokenBalance, xtzBalance, xtzDecimals = 6) {
        const n = (0, big_integer_1.default)(xtzAmount).multiply((0, big_integer_1.default)(tokenBalance)).multiply((0, big_integer_1.default)(ExchangeMultiplier));
        const d = (0, big_integer_1.default)(xtzBalance).multiply((0, big_integer_1.default)(1000)).add((0, big_integer_1.default)(xtzAmount).multiply((0, big_integer_1.default)(ExchangeMultiplier)));
        const tokenAmount = n.divide(d);
        const dm = tokenAmount.divmod((0, big_integer_1.default)(xtzAmount));
        const f = dm.remainder.multiply((0, big_integer_1.default)(10 ** xtzDecimals)).divide((0, big_integer_1.default)(xtzAmount));
        return { tokenAmount: tokenAmount.toJSNumber(), rate: parseFloat(`${dm.quotient.toJSNumber()}.${f.toJSNumber()}`) };
    }
    DexterPoolHelper.getTokenExchangeRate = getTokenExchangeRate;
    function getXTZExchangeRate(tokenAmount, tokenBalance, xtzBalance, tokenDecimals = 6) {
        const n = (0, big_integer_1.default)(tokenAmount).multiply((0, big_integer_1.default)(xtzBalance)).multiply((0, big_integer_1.default)(ExchangeMultiplier));
        const d = (0, big_integer_1.default)(tokenBalance).multiply((0, big_integer_1.default)(1000)).add((0, big_integer_1.default)(tokenAmount).multiply((0, big_integer_1.default)(ExchangeMultiplier)));
        const xtzAmount = n.divide(d);
        const dm = xtzAmount.divmod((0, big_integer_1.default)(tokenAmount));
        const f = dm.remainder.multiply((0, big_integer_1.default)(10 ** tokenDecimals)).divide((0, big_integer_1.default)(tokenAmount));
        return { xtzAmount: xtzAmount.toJSNumber(), rate: parseFloat(`${dm.quotient.toJSNumber()}.${f.toJSNumber()}`) };
    }
    DexterPoolHelper.getXTZExchangeRate = getXTZExchangeRate;
    function estimateLiquidityAmount(xtzDeposit, liquidityBalance, xtzBalance) {
        return (0, big_integer_1.default)(xtzDeposit).multiply((0, big_integer_1.default)(liquidityBalance)).divide((0, big_integer_1.default)(xtzBalance)).toJSNumber();
    }
    DexterPoolHelper.estimateLiquidityAmount = estimateLiquidityAmount;
    function estimateShareCost(xtzBalance, tokenBalance, liquidityBalance) {
        const xtzShare = (0, big_integer_1.default)(xtzBalance).divide((0, big_integer_1.default)(99)).toJSNumber();
        const tokenShare = calcTokenLiquidityRequirement(xtzShare, tokenBalance, xtzBalance);
        return { xtzCost: xtzShare, tokenCost: tokenShare };
    }
    DexterPoolHelper.estimateShareCost = estimateShareCost;
})(DexterPoolHelper = exports.DexterPoolHelper || (exports.DexterPoolHelper = {}));
//# sourceMappingURL=DexterPoolHelper.js.map