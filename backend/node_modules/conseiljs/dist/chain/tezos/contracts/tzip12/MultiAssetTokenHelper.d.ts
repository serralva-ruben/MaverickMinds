import { KeyStore, Signer } from '../../../../types/ExternalInterfaces';
import { Transaction } from '../../../../types/tezos/TezosP2PMessageTypes';
export interface MultiAssetSimpleStorage {
    administrator: string;
    tokens: number;
    ledger: number;
    metadata: number;
    paused: string;
    operators: number;
    tokenMetadata: number;
    totalSupply?: number;
}
export interface MultiAssetTokenDefinition {
    tokenid: number;
    metadata: Record<string, string>;
}
export interface TokenTransfer {
    destination: string;
    token_id: number | string;
    amount: number;
}
export declare function TokenTransactionMichelson(tx: TokenTransfer): string;
export interface TransferPair {
    source: string;
    txs: TokenTransfer[];
}
export declare function TransferPairMichelson(transfers: TransferPair[]): string;
export interface UpdateOperator {
    owner: string;
    operator: string;
    tokenid: number;
}
export declare namespace MultiAssetTokenHelper {
    function verifyDestination(server: string, address: string): Promise<boolean>;
    function verifyScript(script: string): boolean;
    function deployContract(server: string, signer: Signer, keystore: KeyStore, fee: number, administrator: string, metadataUrl: string, pause?: boolean, gas?: number, freight?: number): Promise<string>;
    function getSimpleStorage(server: string, address: string): Promise<MultiAssetSimpleStorage>;
    function getTokenDefinition(server: string, mapid: number, token?: number): Promise<MultiAssetTokenDefinition>;
    function activate(server: string, address: string, signer: Signer, keystore: KeyStore, fee: number, gas?: number, freight?: number): Promise<string>;
    function deactivate(server: string, address: string, signer: Signer, keystore: KeyStore, fee: number, gas?: number, freight?: number): Promise<string>;
    function changeAdministrator(server: string, address: string, signer: Signer, keystore: KeyStore, fee: number, administrator: string, gas?: number, freight?: number): Promise<string>;
    function mint(server: string, address: string, signer: Signer, keystore: KeyStore, fee: number, destination: string, amount: number, metadata: Record<string, string>, tokenid: number, gas?: number, freight?: number): Promise<string>;
    function transfer(server: string, address: string, signer: Signer, keystore: KeyStore, fee: number, transfers: TransferPair[], gas?: number, freight?: number): Promise<string>;
    function AddOperatorsOperation(address: string, counter: number, pkh: string, fee: number, updateOps: UpdateOperator[], gas?: number, freight?: number): Transaction;
    function addOperators(server: string, address: string, signer: Signer, keystore: KeyStore, fee: number, updateOps: UpdateOperator[], gas?: number, freight?: number): Promise<string>;
    function RemoveOperatorsOperation(address: string, counter: number, pkh: string, fee: number, updateOps: UpdateOperator[], gas?: number, freight?: number): Transaction;
    function removeOperators(server: string, address: string, signer: Signer, keystore: KeyStore, fee: number, updateOps: UpdateOperator[], gas?: number, freight?: number): Promise<string>;
    function getAccountBalance(server: string, mapid: number, account: string, tokenid: number, balancePath?: string): Promise<number>;
}
