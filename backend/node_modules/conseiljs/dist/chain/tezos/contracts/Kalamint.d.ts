import { KeyStore, Signer } from "../../../types/ExternalInterfaces";
import { ConseilServerInfo } from "../../../types/conseil/QueryTypes";
import BigNumber from "bignumber.js";
export declare namespace KalamintHelper {
    export const artHouseAddress: string;
    export const auctionFactoryAddress: string;
    export const ledgerMapId: number;
    export const metadataMapId: number;
    export const tokenMapId: number;
    export type Auctions = {
        [id: number]: string;
    };
    export interface KalamintStorage {
        administrator: string;
        allCollections: number;
        allTokens: number;
        auctionsFactory: string;
        auctions: Auctions;
        biddingFee: number;
        collections: number;
        idMaxIncrement: number;
        ipfsRegistry: string;
        ledger: number;
        maxEditions: number;
        maxRoyalty: number;
        metadata: number;
        operators: number;
        paused: boolean;
        tokenMetadata: number;
        tokens: number;
        tradingFee: number;
        tradingFeeCollector: string;
        x: number;
    }
    export function getStorage(server: string, address: string): Promise<KalamintStorage>;
    export interface BidPair {
        tokenId: number;
        amount: number;
    }
    export function bid(server: string, address: string, signer: Signer, keystore: KeyStore, bid: BidPair, fee: number, gas?: number, freight?: number): Promise<string>;
    export interface BuyPair {
        tokenId: number;
        amount: number;
    }
    export function buy(server: string, address: string, signer: Signer, keystore: KeyStore, buy: BuyPair, fee: number, gas?: number, freight?: number): Promise<string>;
    export interface CollectionInfo {
        collectionName: string;
        creatorName: string;
        creatorAddress: string;
        editionNumber: number;
        editions: number;
    }
    export interface Artwork {
        tokenId: number;
        name: string;
        description: string | undefined;
        acquisition: InvocationMetadata;
        collection: CollectionInfo;
        currentPrice: BigNumber;
        onSale: boolean;
        onAuction: boolean;
        metadataURI: string;
        artifactURI: string;
    }
    export function getArtworks(ledgerMapId: number, tokenMapId: number, metadataMapId: number, address: string, serverInfo: ConseilServerInfo): Promise<Artwork[]>;
    interface InvocationMetadata {
        entryPoint: string;
        amount: BigNumber | undefined;
        timestamp: Date;
    }
    export interface Transaction {
        source: string;
        destination: string;
        invocation: InvocationMetadata;
        operationGroupHash: string;
        fee: BigNumber;
    }
    export function getTokenTransactions(artHouseAddress: string, auctionFactoryAddress: string, address: string, serverInfo: ConseilServerInfo): Promise<Transaction[]>;
    export function getArtworkDescription(artwork: Artwork): Promise<Artwork>;
    export {};
}
