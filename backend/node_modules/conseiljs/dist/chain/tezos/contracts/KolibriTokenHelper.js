"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KolibriTokenHelper = void 0;
const jsonpath_plus_1 = require("jsonpath-plus");
const TezosTypes = __importStar(require("../../../types/tezos/TezosChainTypes"));
const TezosConstants_1 = require("../../../types/tezos/TezosConstants");
const TezosMessageUtil_1 = require("../TezosMessageUtil");
const TezosNodeReader_1 = require("../TezosNodeReader");
const TezosNodeWriter_1 = require("../TezosNodeWriter");
const TezosContractUtils_1 = require("./TezosContractUtils");
var KolibriTokenHelper;
(function (KolibriTokenHelper) {
    function verifyDestination(server, address) {
        return __awaiter(this, void 0, void 0, function* () {
            return TezosContractUtils_1.TezosContractUtils.verifyDestination(server, address, '0e3e137841a959521324b4ce20ca2df7');
        });
    }
    KolibriTokenHelper.verifyDestination = verifyDestination;
    function verifyScript(script) {
        return TezosContractUtils_1.TezosContractUtils.verifyScript(script, 'b77ada691b1d630622bea243696c84d7');
    }
    KolibriTokenHelper.verifyScript = verifyScript;
    function getAccountBalance(server, mapid, account) {
        return __awaiter(this, void 0, void 0, function* () {
            const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(account, 'address'), 'hex'));
            const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);
            if (mapResult === undefined) {
                throw new Error(`Map ${mapid} does not contain a record for ${account}`);
            }
            const jsonresult = (0, jsonpath_plus_1.JSONPath)({ path: '$.args[1].int', json: mapResult });
            return Number(jsonresult[0]);
        });
    }
    KolibriTokenHelper.getAccountBalance = getAccountBalance;
    function getAccountAllowance(server, mapid, account, source) {
        return __awaiter(this, void 0, void 0, function* () {
            const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(source, 'address'), 'hex'));
            const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);
            if (mapResult === undefined) {
                throw new Error(`Map ${mapid} does not contain a record for ${source}/${account}`);
            }
            let allowances = new Map();
            (0, jsonpath_plus_1.JSONPath)({ path: '$.args[1][*].args', json: mapResult }).forEach(v => allowances[v[0]['string']] = Number(v[1]['int']));
            return allowances[account];
        });
    }
    KolibriTokenHelper.getAccountAllowance = getAccountAllowance;
    function getSimpleStorage(server, address) {
        return __awaiter(this, void 0, void 0, function* () {
            const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, address);
            return {
                mapid: Number((0, jsonpath_plus_1.JSONPath)({ path: '$.args[0].args[0].args[1].int', json: storageResult })[0]),
                supply: Number((0, jsonpath_plus_1.JSONPath)({ path: '$.args[3].int', json: storageResult })[0]),
                administrator: (0, jsonpath_plus_1.JSONPath)({ path: '$.args[0].args[0].args[0].string', json: storageResult })[0],
                paused: ((0, jsonpath_plus_1.JSONPath)({ path: '$.args[1].args[1].prim', json: storageResult })[0]).toString().toLowerCase().startsWith('t')
            };
        });
    }
    KolibriTokenHelper.getSimpleStorage = getSimpleStorage;
    function getTokenSupply(server, address) {
        return __awaiter(this, void 0, void 0, function* () {
            const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, address);
            return Number((0, jsonpath_plus_1.JSONPath)({ path: '$.args[3].int', json: storageResult })[0]);
        });
    }
    KolibriTokenHelper.getTokenSupply = getTokenSupply;
    function getAdministrator(server, address) {
        return __awaiter(this, void 0, void 0, function* () {
            const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, address);
            return (0, jsonpath_plus_1.JSONPath)({ path: '$.args[1].string', json: storageResult })[0];
        });
    }
    KolibriTokenHelper.getAdministrator = getAdministrator;
    function getPaused(server, address) {
        return __awaiter(this, void 0, void 0, function* () {
            const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, address);
            return ((0, jsonpath_plus_1.JSONPath)({ path: '$.args[2].prim', json: storageResult })[0]).toString().toLowerCase().startsWith('t');
        });
    }
    KolibriTokenHelper.getPaused = getPaused;
    function transferBalance(server, signer, keystore, contract, fee, source, destination, amount, gas, freight) {
        return __awaiter(this, void 0, void 0, function* () {
            const parameters = `(Left (Left (Left (Pair "${source}" (Pair "${destination}" ${amount})))))`;
            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, contract, 0, fee, freight, gas, '', parameters, TezosTypes.TezosParameterFormat.Michelson, TezosConstants_1.TezosConstants.HeadBranchOffset, true);
            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);
        });
    }
    KolibriTokenHelper.transferBalance = transferBalance;
    function approveBalance(server, signer, keystore, contract, fee, destination, amount, gas, freight) {
        return __awaiter(this, void 0, void 0, function* () {
            const parameters = `(Left (Left (Right (Pair "${destination}" ${amount}))))`;
            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, contract, 0, fee, freight, gas, '', parameters, TezosTypes.TezosParameterFormat.Michelson, TezosConstants_1.TezosConstants.HeadBranchOffset, true);
            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);
        });
    }
    KolibriTokenHelper.approveBalance = approveBalance;
    function activateLedger(server, signer, keystore, contract, fee, gas, freight) {
        return __awaiter(this, void 0, void 0, function* () {
            const parameters = '(Right (Left (Left False)))';
            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, contract, 0, fee, freight, gas, '', parameters, TezosTypes.TezosParameterFormat.Michelson, TezosConstants_1.TezosConstants.HeadBranchOffset, true);
            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);
        });
    }
    KolibriTokenHelper.activateLedger = activateLedger;
    function deactivateLedger(server, signer, keystore, contract, fee, gas, freight) {
        return __awaiter(this, void 0, void 0, function* () {
            const parameters = '(Right (Left (Left True)))';
            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, contract, 0, fee, freight, gas, '', parameters, TezosTypes.TezosParameterFormat.Michelson, TezosConstants_1.TezosConstants.HeadBranchOffset, true);
            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);
        });
    }
    KolibriTokenHelper.deactivateLedger = deactivateLedger;
    function setAdministrator(server, signer, keystore, contract, address, fee, gas, freight) {
        return __awaiter(this, void 0, void 0, function* () {
            const parameters = `(Right (Left (Right "${address}")))`;
            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, contract, 0, fee, freight, gas, '', parameters, TezosTypes.TezosParameterFormat.Michelson, TezosConstants_1.TezosConstants.HeadBranchOffset, true);
            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);
        });
    }
    KolibriTokenHelper.setAdministrator = setAdministrator;
    function mint(server, signer, keystore, contract, fee, destination, amount, gas = 150000, freight = 5000) {
        return __awaiter(this, void 0, void 0, function* () {
            const parameters = `(Right (Right (Right (Left (Pair "${destination}" ${amount})))))`;
            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, contract, 0, fee, freight, gas, '', parameters, TezosTypes.TezosParameterFormat.Michelson, TezosConstants_1.TezosConstants.HeadBranchOffset, true);
            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);
        });
    }
    KolibriTokenHelper.mint = mint;
    function burn(server, signer, keystore, contract, fee, source, amount, gas, freight) {
        return __awaiter(this, void 0, void 0, function* () {
            const parameters = `(Right (Right (Right (Right (Pair "${source}" ${amount})))))`;
            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, contract, 0, fee, freight, gas, '', parameters, TezosTypes.TezosParameterFormat.Michelson, TezosConstants_1.TezosConstants.HeadBranchOffset, true);
            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);
        });
    }
    KolibriTokenHelper.burn = burn;
})(KolibriTokenHelper = exports.KolibriTokenHelper || (exports.KolibriTokenHelper = {}));
//# sourceMappingURL=KolibriTokenHelper.js.map