"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HicNFTHelper = void 0;
const jsonpath_plus_1 = require("jsonpath-plus");
const bignumber_js_1 = require("bignumber.js");
const TezosNodeReader_1 = require("../TezosNodeReader");
const QueryTypes_1 = require("../../../types/conseil/QueryTypes");
const ConseilQueryBuilder_1 = require("../../../reporting/ConseilQueryBuilder");
const TezosConseilClient_1 = require("../../../reporting/tezos/TezosConseilClient");
const TezosChainTypes_1 = require("../../../types/tezos/TezosChainTypes");
const TezosMessageUtil_1 = require("../TezosMessageUtil");
var HicNFTHelper;
(function (HicNFTHelper) {
    HicNFTHelper.objktsAddress = 'KT1RJ6PbjHpwc3M5rw5s2Nbmefwbuwbdxton';
    HicNFTHelper.hDaoAddress = 'KT1AFA2mwNUMNd4SsujE1YYp29vd8BZejyKW';
    function getStorage(server, address) {
        return __awaiter(this, void 0, void 0, function* () {
            const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, address);
            return {
                administrator: (0, jsonpath_plus_1.JSONPath)({ path: '$.args[0].args[0].string', json: storageResult })[0],
                tokens: Number((0, jsonpath_plus_1.JSONPath)({ path: '$.args[0].args[1].int', json: storageResult })[0]),
                ledger: Number((0, jsonpath_plus_1.JSONPath)({ path: '$.args[0].args[2].int', json: storageResult })[0]),
                metadata: Number((0, jsonpath_plus_1.JSONPath)({ path: '$.args[1].args[0].int', json: storageResult })[0]),
                operators: Number((0, jsonpath_plus_1.JSONPath)({ path: '$.args[1].args[1].int', json: storageResult })[0]),
                paused: ((0, jsonpath_plus_1.JSONPath)({ path: '$.args[2].prim', json: storageResult })[0]).toString().toLowerCase().startsWith('t'),
                tokenMetadata: Number((0, jsonpath_plus_1.JSONPath)({ path: '$.args[3].int', json: storageResult })[0])
            };
        });
    }
    HicNFTHelper.getStorage = getStorage;
    function makeLastPriceQuery(operations) {
        let lastPriceQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery();
        lastPriceQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addFields(lastPriceQuery, 'timestamp', 'amount', 'operation_group_hash', 'parameters_entrypoints', 'parameters');
        lastPriceQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(lastPriceQuery, 'kind', QueryTypes_1.ConseilOperator.EQ, ['transaction']);
        lastPriceQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(lastPriceQuery, 'status', QueryTypes_1.ConseilOperator.EQ, ['applied']);
        lastPriceQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(lastPriceQuery, 'internal', QueryTypes_1.ConseilOperator.EQ, ['false']);
        lastPriceQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(lastPriceQuery, 'operation_group_hash', operations.length > 1 ? QueryTypes_1.ConseilOperator.IN : QueryTypes_1.ConseilOperator.EQ, operations);
        lastPriceQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(lastPriceQuery, operations.length);
        return lastPriceQuery;
    }
    function getCollection(tokenMapId, managerAddress, serverInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            let collectionQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery();
            collectionQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addFields(collectionQuery, 'key', 'value', 'operation_group_id');
            collectionQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(collectionQuery, 'big_map_id', QueryTypes_1.ConseilOperator.EQ, [tokenMapId]);
            collectionQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(collectionQuery, 'key', QueryTypes_1.ConseilOperator.STARTSWITH, [
                `Pair 0x${TezosMessageUtil_1.TezosMessageUtils.writeAddress(managerAddress)}`,
            ]);
            collectionQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(collectionQuery, 'value', QueryTypes_1.ConseilOperator.EQ, [0], true);
            collectionQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(collectionQuery, 10000);
            const collectionResult = yield TezosConseilClient_1.TezosConseilClient.getTezosEntityData(serverInfo, serverInfo.network, 'big_map_contents', collectionQuery);
            const operationGroupIds = collectionResult.map((r) => r.operation_group_id);
            const queryChunks = chunkArray(operationGroupIds, 30);
            const priceQueries = queryChunks.map((c) => makeLastPriceQuery(c));
            const priceMap = {};
            yield Promise.all(priceQueries.map((q) => __awaiter(this, void 0, void 0, function* () {
                return yield TezosConseilClient_1.TezosConseilClient.getTezosEntityData(serverInfo, serverInfo.network, 'operations', q).then((result) => result.map((row) => {
                    let amount = 0;
                    const action = row.parameters_entrypoints;
                    if (action === 'collect') {
                        amount = Number(row.parameters.toString().replace(/^Pair ([0-9]+) [0-9]+/, '$1'));
                    }
                    else if (action === 'transfer') {
                        amount = Number(row.parameters
                            .toString()
                            .replace(/[{] Pair \"[1-9A-HJ-NP-Za-km-z]{36}\" [{] Pair \"[1-9A-HJ-NP-Za-km-z]{36}\" [(]Pair [0-9]+ [0-9]+[)] [}] [}]/, '$1'));
                    }
                    priceMap[row.operation_group_hash] = {
                        price: new bignumber_js_1.BigNumber(row.amount),
                        amount,
                        timestamp: row.timestamp,
                        action,
                    };
                }));
            })));
            const collection = collectionResult.map((row) => {
                let price = 0;
                let receivedOn = new Date();
                let action = '';
                try {
                    const priceRecord = priceMap[row.operation_group_id];
                    price = priceRecord.price.dividedToIntegerBy(priceRecord.amount).toNumber();
                    receivedOn = new Date(priceRecord.timestamp);
                    action = priceRecord.action === 'collect' ? 'Purchased' : 'Received';
                }
                catch (_a) {
                }
                return {
                    piece: row.key.toString().replace(/.* ([0-9]{1,}$)/, '$1'),
                    amount: Number(row.value),
                    price: isNaN(price) ? 0 : price,
                    receivedOn,
                    action,
                };
            });
            return collection.sort((a, b) => b.receivedOn.getTime() - a.receivedOn.getTime());
        });
    }
    HicNFTHelper.getCollection = getCollection;
    function getCollectionSize(tokenMapId, managerAddress, serverInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            const collection = yield getCollection(tokenMapId, managerAddress, serverInfo);
            const tokenCount = collection.reduce((a, c) => a + c.amount, 0);
            return tokenCount;
        });
    }
    HicNFTHelper.getCollectionSize = getCollectionSize;
    function getBalance(server, mapId, address) {
        return __awaiter(this, void 0, void 0, function* () {
            const packedTokenKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(`(Pair 0x${TezosMessageUtil_1.TezosMessageUtils.writeAddress(address)} 0)`, '', TezosChainTypes_1.TezosParameterFormat.Michelson), 'hex'));
            let balance = 0;
            try {
                const balanceResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapId, packedTokenKey);
                balance = new bignumber_js_1.BigNumber((0, jsonpath_plus_1.JSONPath)({ path: '$.int', json: balanceResult })[0]).toNumber();
            }
            catch (err) {
            }
            return balance;
        });
    }
    HicNFTHelper.getBalance = getBalance;
    function getTokenInfo(serverInfo, mapId = 515) {
        return __awaiter(this, void 0, void 0, function* () {
            let holdersQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.blankQuery();
            holdersQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addFields(holdersQuery, 'value');
            holdersQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.addPredicate(holdersQuery, 'big_map_id', QueryTypes_1.ConseilOperator.EQ, [mapId]);
            holdersQuery = ConseilQueryBuilder_1.ConseilQueryBuilder.setLimit(holdersQuery, 20000);
            const holdersResult = yield TezosConseilClient_1.TezosConseilClient.getTezosEntityData(serverInfo, serverInfo.network, 'big_map_contents', holdersQuery);
            let holders = 0;
            let totalBalance = new bignumber_js_1.BigNumber(0);
            holdersResult.forEach((r) => {
                try {
                    const balance = new bignumber_js_1.BigNumber(r.value);
                    if (balance.isGreaterThan(0)) {
                        totalBalance = totalBalance.plus(balance);
                    }
                    holders++;
                }
                catch (_a) {
                }
            });
            return { holders, totalBalance: totalBalance.toNumber() };
        });
    }
    HicNFTHelper.getTokenInfo = getTokenInfo;
    function getNFTObjectDetails(server, objectId) {
        return __awaiter(this, void 0, void 0, function* () {
            const packedNftId = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(objectId, 'int'), 'hex'));
            const nftInfo = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, 514, packedNftId);
            const ipfsUrlBytes = (0, jsonpath_plus_1.JSONPath)({ path: '$.args[1][0].args[1].bytes', json: nftInfo })[0];
            const ipfsHash = Buffer.from(ipfsUrlBytes, 'hex').toString().slice(7);
            const nftDetails = yield fetch(`https://cloudflare-ipfs.com/ipfs/${ipfsHash}`, { cache: 'no-store' });
            const nftDetailJson = yield nftDetails.json();
            const nftName = nftDetailJson.name;
            const nftDescription = nftDetailJson.description;
            const nftCreators = nftDetailJson.creators
                .map((c) => c.trim())
                .map((c) => `${c.slice(0, 6)}...${c.slice(c.length - 6, c.length)}`)
                .join(', ');
            const nftArtifact = `https://cloudflare-ipfs.com/ipfs/${nftDetailJson.formats[0].uri.toString().slice(7)}`;
            const nftArtifactType = nftDetailJson.formats[0].mimeType.toString();
            return { name: nftName, description: nftDescription, creators: nftCreators, artifactUrl: nftArtifact, artifactType: nftArtifactType };
        });
    }
    HicNFTHelper.getNFTObjectDetails = getNFTObjectDetails;
    function chunkArray(arr, len) {
        const chunks = [];
        const n = arr.length;
        let i = 0;
        while (i < n) {
            chunks.push(arr.slice(i, (i += len)));
        }
        return chunks;
    }
})(HicNFTHelper = exports.HicNFTHelper || (exports.HicNFTHelper = {}));
//# sourceMappingURL=HicNFT.js.map